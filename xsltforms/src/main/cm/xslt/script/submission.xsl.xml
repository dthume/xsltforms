<cm:component xmlns:cm="http://www.agencexml.com/cm" name="submission.xsl">
	<cm:author>Alain Couthures</cm:author>
	<cm:creationdate>2009-04-08</cm:creationdate>
	<cm:lastupdate>2009-04-08</cm:lastupdate>
	<cm:licence>
Copyright (C) 2008-2010 agenceXML - Alain COUTHURES
Contact at : info@agencexml.com

Copyright (C) 2006 AJAXForms S.L.
Contact at: info@ajaxforms.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
	</cm:licence>
	<cm:source type="application/xml">
        <xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" match="xforms:submission" mode="script" priority="1">
            <xsl:variable name="idsubmission" select="count(preceding::xforms:submission|ancestor::xforms:submission)"/>
            <xsl:text>new xfElementFactory.XFSubmission({</xsl:text>
            <xsl:text>&#xA;&#9;id: "</xsl:text>
            <xsl:choose>
                <xsl:when test="@id"><xsl:value-of select="@id"/></xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$xformID" />
                    <xsl:text>-xf-submission-</xsl:text>
                    <xsl:value-of select="$idsubmission"/>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>",&#xA;&#9;model: </xsl:text>
            <xsl:for-each select="parent::*">
                <xsl:variable name="lname" select="local-name()"/>
                <xsl:text>xf_</xsl:text>
                <xsl:value-of select="$lname"/>
                <xsl:text>_</xsl:text>
                <xsl:value-of select="count(preceding::*[local-name()=$lname]|ancestor::*[local-name()=$lname])"/>
            </xsl:for-each>
            <xsl:text>,&#xA;&#9;ref: </xsl:text>
            <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@ref"/></xsl:call-template>
            <xsl:text>,&#xA;&#9;bind: </xsl:text>
            <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@bind"/></xsl:call-template>
            <xsl:text>,&#xA;&#9;action: </xsl:text>
            <xsl:choose>
                <xsl:when test="xforms:resource/@value">
                    <xsl:variable name="idmodel">
                        <xsl:for-each select="ancestor::xforms:model">
                            <xsl:choose>
                                <xsl:when test="@id"><xsl:value-of select="@id"/></xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="$xformID" />
                                    <xsl:text>-xf-model-</xsl:text>
                                    <xsl:value-of select="count(preceding::xforms:model|ancestor::xforms:model)"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:for-each>
                    </xsl:variable>
                    <xsl:for-each select="xforms:resource[1]">
                        <xsl:call-template name="toScriptBinding"><xsl:with-param name="model" select="$idmodel"/></xsl:call-template>
                    </xsl:for-each>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="resource">
                        <xsl:choose>
                            <xsl:when test="xforms:resource"><xsl:value-of select="xforms:resource"/></xsl:when>
                            <xsl:when test="@resource"><xsl:value-of select="@resource"/></xsl:when>
                            <xsl:otherwise><xsl:value-of select="@action"/></xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="$resource"/></xsl:call-template>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>,&#xA;&#9;method: </xsl:text>
            <xsl:choose>
                <xsl:when test="xforms:method/@value">
                    <xsl:variable name="idmodel">
                        <xsl:for-each select="ancestor::xforms:model">
                            <xsl:choose>
                                <xsl:when test="@id"><xsl:value-of select="@id"/></xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="$xformID" />
                                    <xsl:text>-xf-model-</xsl:text>
                                    <xsl:value-of select="count(preceding::xforms:model|ancestor::xforms:model)"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:for-each>
                    </xsl:variable>
                    <xsl:for-each select="xforms:method[1]">
                        <xsl:call-template name="toScriptBinding"><xsl:with-param name="model" select="$idmodel"/></xsl:call-template>
                    </xsl:for-each>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="method">
                        <xsl:choose>
                            <xsl:when test="xforms:method"><xsl:value-of select="xforms:method"/></xsl:when>
                            <xsl:when test="@method"><xsl:value-of select="@method"/></xsl:when>
                            <xsl:otherwise>post</xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="$method"/></xsl:call-template>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>,&#xA;&#9;version: </xsl:text>
            <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@version"/></xsl:call-template>
            <xsl:text>,&#xA;&#9;indent: </xsl:text>
            <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@indent"/></xsl:call-template>
            <xsl:text>,&#xA;&#9;mediatype: </xsl:text>
            <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@mediatype"/></xsl:call-template>
            <xsl:text>,&#xA;&#9;encoding: </xsl:text>
            <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@encoding"/></xsl:call-template>
            <xsl:text>,&#xA;&#9;omitXmlDeclaration: </xsl:text>
            <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@omit-xml-declaration"/></xsl:call-template>
            <xsl:text>,&#xA;&#9;cdataSectionElements: </xsl:text>
            <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@cdata-section-elements"/></xsl:call-template>
            <xsl:text>,&#xA;&#9;replace: </xsl:text>
            <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@replace"/><xsl:with-param name="default">"all"</xsl:with-param></xsl:call-template>
            <xsl:text>,&#xA;&#9;instance: </xsl:text>
            <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@instance"/></xsl:call-template>
            <xsl:text>,&#xA;&#9;separator: </xsl:text>
            <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@separator"/><xsl:with-param name="default">"&amp;"</xsl:with-param></xsl:call-template>
            <xsl:text>,&#xA;&#9;includenamespaceprefixes: </xsl:text>
            <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@includenamespaceprefixes"/></xsl:call-template>
            <xsl:text>,&#xA;&#9;validate: </xsl:text>
            <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@validate"/><xsl:with-param name="default"><xsl:choose><xsl:when test="@serialization='none'">false</xsl:when><xsl:otherwise>true</xsl:otherwise></xsl:choose></xsl:with-param></xsl:call-template>
            <xsl:text>,&#xA;&#9;synchr: </xsl:text>
            <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@ajx:synchronized"/><xsl:with-param name="default">true</xsl:with-param></xsl:call-template>
            <xsl:text>,&#xA;&#9;show: </xsl:text>
            <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@show"/></xsl:call-template>
            <xsl:text>,&#xA;&#9;serialization: </xsl:text>
            <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@serialization"/></xsl:call-template>
            <xsl:text>&#xA;})</xsl:text>
            <xsl:for-each select="xforms:header">
                <xsl:text>.header(</xsl:text>
                <xsl:call-template name="toScriptBinding"><xsl:with-param name="p" select="@nodeset"/></xsl:call-template>
                <xsl:text>,</xsl:text>
                <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@combine"/><xsl:with-param name="default">"append"</xsl:with-param></xsl:call-template>
                <xsl:text>,</xsl:text>
                <xsl:choose>
                    <xsl:when test="xforms:name/@value">
                        <xsl:text>new xform.Binding({</xsl:text>
                        <xsl:text>&#xA;&#9;isvalue: true</xsl:text>
                        <xsl:text>,&#xA;&#9;xpath: "</xsl:text>
                        <xsl:call-template name="toXPathExpr">
                          <xsl:with-param name="p" select="xforms:name/@value"/>
                        </xsl:call-template>
                        <xsl:text>"&#xA;})</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="xforms:name"/></xsl:call-template>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>,[</xsl:text>
                <xsl:for-each select="xforms:value">
                    <xsl:choose>
                        <xsl:when test="@value">
                            <xsl:text>new xform.Binding({</xsl:text>
                            <xsl:text>&#xA;&#9;isvalue: true</xsl:text>
                            <xsl:text>,&#xA;&#9;xpath: "</xsl:text>
                            <xsl:call-template name="toXPathExpr">
                              <xsl:with-param name="p" select="@value"/>
                            </xsl:call-template>
                            <xsl:text>"&#xA;})</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="."/></xsl:call-template>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:if test="position() != last()">
                        <xsl:text>,</xsl:text>
                    </xsl:if>
                </xsl:for-each>
                <xsl:text>])</xsl:text>
            </xsl:for-each>
            <xsl:text>;&#xA;</xsl:text>
            <xsl:apply-templates select="*" mode="script"/>
            <xsl:call-template name="listeners"/>
        </xsl:template>
	</cm:source>
</cm:component>