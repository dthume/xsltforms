<cm:component xmlns:cm="http://www.agencexml.com/cm" name="Binding.js">
	<cm:author>Alain Couthures</cm:author>
	<cm:creationdate>2009-04-07</cm:creationdate>
	<cm:lastupdate>2009-04-07</cm:lastupdate>
	<cm:licence>
Copyright (C) 2008-2010 &lt;agenceXML&gt; - Alain COUTHURES
Contact at : &lt;info@agencexml.com&gt;

Copyright (C) 2006 AJAXForms S.L.
Contact at: &lt;info@ajaxforms.com&gt;

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
	</cm:licence>
	<cm:source type="text/javascript">
		<cm:wiki>
=== "Binding" class ===
XForms Binding Management
* constructor function : "xpath", "model" and "bind" properties are resolved</cm:wiki>
		<![CDATA[
function Binding(isvalue, xpath, model, bind) {
	this.isvalue = isvalue;
	this.bind = bind? bind : null;
	this.xpath = xpath? XPath.get(xpath) : null;
	var modelelt = model;
	if( typeof model == "string" ) {
		modelelt = document.getElementById(model);
	}
	this.model = model? (modelelt != null ? modelelt.xfElement : model) : null;
}

]]>
		<cm:wiki>
* '''evaluate''' method : evaluates the binding</cm:wiki>
<![CDATA[
Binding.prototype.evaluate = function(ctx, depsNodes, depsId, depsElements) {
//alert("Binding: "+depsId);
	var result = null;
	if (this.bind) {
		if (typeof this.bind == "string") {
			var idel = document.getElementById(this.bind);
			if (!idel) {
				return null;	// A 'null' signifies bind-ID not found.
			}
			this.bind = idel.xfElement;
		}
		result = this.bind.nodes;
		copyArray(this.bind.depsNodes, depsNodes);
		copyArray(this.bind.depsElements, depsElements);
/*
if(this.bind.depsNodes) {
var s = this.bind.depsNodes.length > 0 ? "Binding: "+depsId+" depsNodes=" : "";
for(var i = 0; i < this.bind.depsNodes.length; i++) s += this.bind.depsNodes[i].nodeName + " ";
if(s!="")alert(s);
}
*/
	} else {
		var exprCtx = new ExprContext(!ctx || (this.model && this.model != document.getElementById(Core.getMeta(ctx.ownerDocument.documentElement, "model")).xfElement) ? this.model ? this.model.getInstanceDocument().documentElement : xforms.defaultModel.getInstanceDocument(): ctx,
			null, null, null, null, ctx, depsNodes, depsId, depsElements);
		result = this.xpath.evaluate(exprCtx);
/*
if(exprCtx.depsNodes) {
var s = exprCtx.depsNodes.length > 0 ? "Binding: "+depsId+" depsNodes=" : "";
for(var i = 0; i < exprCtx.depsNodes.length; i++) s += exprCtx.depsNodes[i].nodeName + " ";
if(s!="")alert(s);
}
*/
	}
	return this.isvalue ? stringValue(result) : result;
};
    ]]>
	</cm:source>
</cm:component>