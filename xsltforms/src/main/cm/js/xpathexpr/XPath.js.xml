<cm:component xmlns:cm="http://www.agencexml.com/cm" name="XPath.js">
	<cm:author>Alain Couthures</cm:author>
	<cm:creationdate>2009-04-07</cm:creationdate>
	<cm:lastupdate>2009-04-07</cm:lastupdate>
	<cm:licence>
Copyright (C) 2008-2010 &lt;agenceXML&gt; - Alain COUTHURES
Contact at : &lt;info@agencexml.com&gt;

Copyright (C) 2006 AJAXForms S.L.
Contact at: &lt;info@ajaxforms.com&gt;

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
	</cm:licence>
	<cm:source type="text/javascript">
		<cm:wiki>
=== XPath Class ===
XPath Class
* constructor function : initializes properties and creates an associated namespace resolver. A compiled argument as string is interpreted as an error detected by the XSLT transformation.</cm:wiki>
		<![CDATA[
function XPath(expression, compiled, ns) {
	this.expression = expression;
	if (typeof compiled == "string") {
		alert("XSLTForms Exception\n--------------------------\n\nError parsing the following XPath expression :\n\n"+expression+"\n\n"+compiled);
		return;
	}
	this.compiled = compiled;
	this.compiled.isRoot = true;
	this.nsresolver = new NSResolver();
	XPath.expressions[expression] = this;

	if (ns.length > 0)  {
		for (var i = 0, len = ns.length; i < len; i += 2) {
			this.nsresolver.register(ns[i], ns[i + 1]);
		}
	} else {
		this.nsresolver.register("", "http://www.w3.org/1999/xhtml");
	}
	if (this.nsresolver.notfound) {
		XPath.notfound = true;
	}
}

]]>
		<cm:wiki>
* '''evaluate''' method : evaluates the complete XPath expression et catches occuring exceptions</cm:wiki>
<![CDATA[
XPath.prototype.evaluate = function(ctx) {
	assert(ctx);

//	alert("XPath evaluate \""+this.expression+"\"");
	if (!ctx.node) {
		ctx = new ExprContext(ctx, 1, null, null, this.nsresolver);
	} else if (!ctx.nsresolver) {
		ctx.nsresolver = this.nsresolver;
	}

	try {
		return this.compiled.evaluate(ctx);
	} catch(e) {
		alert("XSLTForms Exception\n--------------------------\n\nError evaluating the following XPath expression :\n\n"+this.expression+"\n\n"+e.name+"\n\n"+e.message);
		return null;
	}
};

]]>
		<cm:wiki>
* '''expressions''' associative array : stores every XPath object</cm:wiki>
<![CDATA[
XPath.expressions = {};
XPath.notfound = false;

]]>
		<cm:wiki>
* '''get''' method : get an XPath object according to a given source text</cm:wiki>
<![CDATA[
XPath.get = function(str) {
	return XPath.expressions[str];
};
]]>
		<cm:wiki>
* '''new''' method : creates an XPath object if it doesn't already exists</cm:wiki>
<![CDATA[
XPath.create = function(expression, compiled) {
	if (XPath.get(expression) != null) {
		delete compiled;
	} else {
		var ns = [];
		for (var i = 2, len = arguments.length; i < len; i += 2) {
			ns[i-2] = arguments[i];
			ns[i-1] = arguments[i+1];
		}
		new XPath(expression, compiled, ns);
	}
};
]]>
		<cm:wiki>
* '''registerNS''' method : register a namespace for all XPath expressions</cm:wiki>
<![CDATA[
XPath.registerNS = function(prefix, uri) {
	if (XPath.notfound) {
		XPath.notfound = false;
		for( e in XPath.expressions ) {
			XPath.expressions[e].nsresolver.registerNotFound(prefix, uri);
			if (XPath.expressions[e].nsresolver.notfound) {
				XPath.notfound = true;
			}
		}
	}
};
    ]]>
	</cm:source>
</cm:component>