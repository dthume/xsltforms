<cm:component xmlns:cm="http://www.agencexml.com/cm" name="XFDispatch.js">
	<cm:author>Alain Couthures</cm:author>
	<cm:creationdate>2009-04-07</cm:creationdate>
	<cm:lastupdate>2009-04-07</cm:lastupdate>
	<cm:licence>
Copyright (C) 2008-2010 &lt;agenceXML&gt; - Alain COUTHURES
Contact at : &lt;info@agencexml.com&gt;

Copyright (C) 2006 AJAXForms S.L.
Contact at: &lt;info@ajaxforms.com&gt;

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
	</cm:licence>
	<cm:source type="text/javascript">
		<cm:wiki>
=== "XFDispatch" class ===
Dispatch Action Class
* constructor function : stores specific properties</cm:wiki>
		<![CDATA[
function XFDispatch(name, target, ifexpr, whileexpr, delay) {
	this.name = name;
	this.target = target;
	this.init(ifexpr, whileexpr);
	this.delay = delay;
}

XFDispatch.prototype = new XFAbstractAction();

]]>
		<cm:wiki>
* '''run''' method : dispatches an XForms event</cm:wiki>
<![CDATA[
XFDispatch.prototype.run = function(element, ctx, evt) {
	var target;
	if (this.target == null) {
		switch (this.name) {
			case "xforms-submit":
				target = document.getElementById(Core.getMeta(ctx.ownerDocument.documentElement, "model")).xfElement.defaultSubmission;
				break;
			case "xforms-reset":
				target = document.getElementById(Core.getMeta(ctx.ownerDocument.documentElement, "model")).xfElement;
				break;
		}
	} else {
		target = typeof this.target == "string"? document.getElementById(this.target) : this.target;
	}
	var delay = 0;
	if (this.delay) {
		if (this.delay.evaluate) {
			delay = numberValue(this.delay.evaluate());
		} else {
			delay = numberValue(this.delay);
		}
	}
	if (delay > 0 ) {
		window.setTimeout("XMLEvents.dispatch(document.getElementById('"+target.id+"'),'"+this.name+"')", delay);
	} else {
		XMLEvents.dispatch(target, this.name);
	}
};
    ]]>
	</cm:source>
</cm:component>