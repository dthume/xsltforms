<cm:component xmlns:cm="http://www.agencexml.com/cm" name="XFControl.js">
	<cm:author>Alain Couthures</cm:author>
	<cm:creationdate>2009-04-07</cm:creationdate>
	<cm:lastupdate>2009-04-07</cm:lastupdate>
	<cm:licence>
Copyright (C) 2008-2010 &lt;agenceXML&gt; - Alain COUTHURES
Contact at : &lt;info@agencexml.com&gt;

Copyright (C) 2006 AJAXForms S.L.
Contact at: &lt;info@ajaxforms.com&gt;

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
	</cm:licence>
	<cm:source type="text/javascript">
		<cm:wiki>
=== "XFControl" class ===
Control  Class
* constructor function : just sets this element as a control</cm:wiki>
		<![CDATA[
function XFControl() {
	this.isControl = true;
}

XFControl.prototype = new XFElement();

]]>
		<cm:wiki>
* '''initFocus''' method : attaches event handlers for "focus" and "blur"</cm:wiki>
<![CDATA[
XFControl.prototype.initFocus = function(element, principal) {
	if (principal) {
		this.focusControl = element;
	}

	Event.attach(element, "focus", XFControl.focusHandler);
	Event.attach(element, "blur", XFControl.blurHandler);
};

]]>
		<cm:wiki>
* '''dispose''' method : calls the parent "dispose()" method</cm:wiki>
<![CDATA[
XFControl.prototype.dispose = function() {
	this.focusControl = null;
	XFElement.prototype.dispose.call(this);
};

]]>
		<cm:wiki>
* '''focus''' method : manages focus and dispatches the "DOMFocusIn" event</cm:wiki>
<![CDATA[
XFControl.prototype.focus = function(focusEvent) {
	if (this.isOutput) {
		return;
	}

	if (xforms.focus != this) {
		xforms.openAction();
		xforms.blur(true);
		xforms.focus = this;
		Core.setClass(this.element, "xforms-focus", true);
		Core.setClass(this.element, "xforms-disabled", false);
		var parent = this.element.parentNode;
	
		while (parent.nodeType == NodeType.ELEMENT) {
			if (typeof parent.node != "undefined"
				&& Core.hasClass(parent, "xforms-repeat-item")) {
				XFRepeat.selectItem(parent);
			}
	
			parent = parent.parentNode;
		}
		
		XMLEvents.dispatch(xforms.focus, "DOMFocusIn");
		xforms.closeAction();
		
		if (this.full && !focusEvent) { // select full
			this.focusFirst();
		}
	}

	var fcontrol = this.focusControl;
	xforms.posibleBlur = false;
	
	if (fcontrol && !focusEvent) {
		var control = this.focusControl;
		var name = control.nodeName.toLowerCase();
		control.focus();
		control.focus();

		if (name == "input" || name == "textarea") {
			control.select();
		}
	}
};

]]>
		<cm:wiki>
* '''build_''' method : specific build method updating dependencies</cm:wiki>
<![CDATA[
XFControl.prototype.build_ = function(ctx) {
	var result = this.evaluateBinding(this.binding, ctx);

	if (typeof result == "object") {
		var node = result[0];
		var element = this.element;
		var old = element.node;

		if (old != node || !xforms.ready) {
			element.node = node;
			this.nodeChanged = true;
		}
		
		if (node) {
			this.depsNodesRefresh.push(node);
		}
	} else {
		this.outputValue = result;
	}
};

]]>
		<cm:wiki>
* '''refresh''' method : refreshes this control according to the value of the corresponding node and dispatches according events</cm:wiki>
<![CDATA[
XFControl.prototype.refresh = function() {
	var element = this.element;
	var node = element.node;

    if (node) {
		var value = getValue(node, true);
		xforms.openAction();
		var changed = value != this.currentValue || this.nodeChanged;
		
		if (this.relevant) {
			Core.setClass(element, "xforms-disabled", false);
		}

		this.changeProp(node, "required", "xforms-required", "xforms-optional", changed);
		this.changeProp(node, "notrelevant", "xforms-disabled", "xforms-enabled", changed);
		this.changeProp(node, "readonly", "xforms-readonly", "xforms-readwrite", changed);
		this.changeProp(node, "notvalid", "xforms-invalid", "xforms-valid", changed);

		if (changed) {
			this.currentValue = value;
			this.setValue(value);

			if (!this.nodeChanged && !this.isTrigger) {
				XMLEvents.dispatch(element, "xforms-value-changed");
			}
		}

		xforms.closeAction();
	} else if (this.outputValue != null) {
		this.setValue(this.outputValue);
		Core.setClass(element, "xforms-disabled", false);
    } else {
	Core.setClass(element, "xforms-disabled", !this.hasValue);
  }    
  this.nodeChanged = false;
};

]]>
		<cm:wiki>
* '''changeProp''' method : changes a property, such as '''required''', '''relevant''', '''readonly''' and '''valid''', of this control</cm:wiki>
<![CDATA[
XFControl.prototype.changeProp = function(node, prop, onTrue, onFalse, changed) {
	var value = Core.getMeta(node, prop);

	if (changed || value != this[prop]) {
		if (!this.nodeChanged && !this.isTrigger) {
			XMLEvents.dispatch(this.element, (value? onTrue : onFalse));
		}

		Core.setClass(this.element, onTrue, value);
		Core.setClass(this.element, onFalse, !value);
		this[prop] = value;
		
		if(prop == "readonly" && this.changeReadonly) {
			this.changeReadonly();
		}
	}	
};

]]>
		<cm:wiki>
* '''valueChanged''' method : changes the value of this control and dispatches the "xforms-recalculate" event</cm:wiki>
<![CDATA[
XFControl.prototype.valueChanged = function(value) {
	var node = this.element.node;
	var model = document.getElementById(Core.getMeta(node.ownerDocument.documentElement, "model")).xfElement;
	var schtyp = Schema.getType(Core.getMeta(node, "type") || "xsd_:string");

	if (value != null && value.length > 0 && schtyp.parse) {
		try { value = schtyp.parse(value); } catch(e) { }
	}
	if (value != getValue(node)) {
		xforms.openAction();
		setValue(node, value);
		model.addChange(node);
		//XMLEvents.dispatch(model, "xforms-recalculate");
		//xforms.refresh();
		xforms.closeAction();
	}
};

]]>
		<cm:wiki>
* '''getXFElement''' function : gets the ancestor-or-self XFElement value for an element</cm:wiki>
<![CDATA[
XFControl.getXFElement = function(element) {
	var xf = null;

	while (!xf && element) {
		xf = element.xfElement;

		if (xf && !xf.isControl) {
			xf = null;
		}

		element = element.parentNode;
	}

	return xf;
};

]]>
		<cm:wiki>
* '''focusHandler''' function : focus handler</cm:wiki>
<![CDATA[
XFControl.focusHandler = function() {
	var xf = XFControl.getXFElement(this);

	if (xforms.focus != xf) {
		xf.focus(true);
	} else {
		xforms.posibleBlur = false;
	}
};

]]>
		<cm:wiki>
* '''blurHandler''' function : blur handler including a delay</cm:wiki>
<![CDATA[
XFControl.blurHandler = function() {
	if (XFControl.getXFElement(this) == xforms.focus) {
		xforms.posibleBlur = true;
		setTimeout("xforms.blur()", 200);
	}
};
    ]]>
	</cm:source>
</cm:component>