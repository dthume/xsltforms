<cm:component xmlns:cm="http://www.agencexml.com/cm" name="XMLEvents.js">
	<cm:author>Alain Couthures</cm:author>
	<cm:creationdate>2009-04-07</cm:creationdate>
	<cm:lastupdate>2009-04-07</cm:lastupdate>
	<cm:licence>
Copyright (C) 2008-2010 &lt;agenceXML&gt; - Alain COUTHURES
Contact at : &lt;info@agencexml.com&gt;

Copyright (C) 2006 AJAXForms S.L.
Contact at: &lt;info@ajaxforms.com&gt;

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
	</cm:licence>
	<cm:source type="text/javascript">
		<cm:wiki>
=== "XMLEvents" class ===
XForms Event Management Class</cm:wiki>
		<![CDATA[
XMLEvents = {
]]>
		<cm:wiki>
* '''REGISTRY''' associative array : stores properties for each predefined event
** bubbles : boolean
** cancelable : boolean
** defaultAction : handler function with empty function as default</cm:wiki>
<![CDATA[
    REGISTRY : [],
]]>
		<cm:wiki>
* '''EventContexts''' array: A stack of event-contexts, maintained right-before and right-after issuing an event 
</cm:wiki>
<![CDATA[
	EventContexts : [],
]]>
		<cm:wiki>
* '''define''' function : convenient function to add a new event in the event registry</cm:wiki>
<![CDATA[
	define : function(name, bubbles, cancelable, defaultAction) {
			XMLEvents.REGISTRY[name] = {
					bubbles:       bubbles,
					cancelable:    cancelable,
					defaultAction: defaultAction? defaultAction : function() { }
			};
	},
]]>
		<cm:wiki>
* '''makeEventContext''' function : convenient function to add predfined properties for all event-contexts</cm:wiki>
<![CDATA[
	makeEventContext : function(evcontext, type, targetid, bubbles, cancelable) {
		if (!evcontext) {
			evcontext = {};
		}
		evcontext.type = type;
		evcontext.targetid = targetid;
		evcontext.bubbles = bubbles;
		evcontext.cancelable = cancelable;
		
		return evcontext;
	}
};

]]>
		<cm:wiki>
* '''dispatchList''' function : dispatches the same event at every target in a given list</cm:wiki>
<![CDATA[
XMLEvents.dispatchList = function(list, name) {
    for (var id in list) {
        XMLEvents.dispatch(list[id], name);
    }
};

]]>
		<cm:wiki>
* '''dispatch''' function : dispatches the given event at a given target with possibly different properties</cm:wiki>
<![CDATA[
XMLEvents.dispatch = function(target, name, type, bubbles, cancelable, defaultAction, evcontext) {
	target = target.element || target;
	assert(target != null && typeof(target.nodeName) != "undefined");
	DebugConsole.write("Dispatching event " + name + " on <" + target.nodeName
      + (target.className? " class=\"" + target.className + "\"" : "")
      + (target.id? " id=\"" + target.id + "\"" : "") + "/>");
	var reg = XMLEvents.REGISTRY[name];

	if (reg != null) {
		bubbles = reg.bubbles;
		cancelable = reg.cancelable;
		defaultAction = reg.defaultAction;
	}

	if (!defaultAction) {
		defaultAction = function() { };
	}

	evcontext = XMLEvents.makeEventContext(evcontext, name, target.id, bubbles, cancelable);
	XMLEvents.EventContexts.push(evcontext);
	try {
    if (target.dispatchEvent) {
			var event = document.createEvent("Event");
			event.initEvent(name, bubbles, cancelable);
			var res = target.dispatchEvent(event);

			if ((res && !event.stopped) || !cancelable) {
				defaultAction.call(target.xfElement, event);
			}
    } else {
			var fauxName = "errorupdate";
			var canceler = null;
			// Capture phase.
			var ancestors = [];

			for (var a = target.parentNode; a != null; a = a.parentNode) {
				ancestors.unshift(a);
			}

			for (var i in ancestors) {
				var event = document.createEventObject();
				event.trueName = name;
				event.phase = "capture";
				ancestors[i].fireEvent("onerrorupdate", event);

				if (event.stopped) {
					return;
				}
			}

			var event = document.createEventObject();
			event.trueName = name;
			event.phase = "capture";
			event.target = target;
			target.fireEvent("onerrorupdate" , event);

			// Bubble phase.
			if (!bubbles) {
				canceler = new Listener(target, name, "default",
					function(event) { event.cancelBubble = true; });
			}

			var event = document.createEventObject();
			event.trueName = name;
			event.phase = "default";
			event.target = target;
        
			var res = target.fireEvent("onerrorupdate", event);

			try {
				if ((res && !event.stopped) || !cancelable) {
					defaultAction.call(target.xfElement, event);
				}

				if (!bubbles) {
					canceler.detach();
				}
			} catch (e) {
			}
		}
	} finally {
		XMLEvents.EventContexts.pop();
	}
};

]]>
		<cm:wiki>
* default event management :
** '''xforms-model-construct''' : fired at the end of the xforms.init() function before '''xforms-ready''' been fired
*** bubbles : yes
*** cancelable : no
*** default handler : construct() method</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-model-construct",      true, false, function(event) { this.construct(); });
]]>
		<cm:wiki>
** '''xforms-model-construct-done''' : fired at the end of the XFModel.construct() method after '''xforms-rebuild''' beeing fired
*** bubbles : yes
*** cancelable : no
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-model-construct-done", true, false);
]]>
		<cm:wiki>
** '''xforms-ready'''' : fired at the end of the xforms.init() function after '''xforms-model-construct''' been fired
*** bubbles : yes
*** cancelable : no
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-ready",                true, false);
]]>
		<cm:wiki>
** '''xforms-model-destruct''' : fired in the xforms.close() function to every models
*** bubbles : yes
*** cancelable : no
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-model-destruct",       true, false);
]]>
		<cm:wiki>
** '''xforms-rebuild''' : fired in the xforms.closeChanges() function when a rebuild is required,
in the XFModel.construct() method before '''xforms-model-construct-done''' being fired and
in the XFSubmission.submit() method when the corresponding instance has just been replaced
*** bubbles : yes
*** cancelable : yes
*** default handler : rebuild() method</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-rebuild",              true, true, function(event) { this.rebuild(); });
]]>
		<cm:wiki>
** '''xforms-recalculate''' : fired in the xforms.closeChanges() function when a rebuild is not required,
at the end of the XFModel.rebuild() method and
in the XFControl.valueChanged() method when the new value is different
*** bubbles : yes
*** cancelable : yes
*** default handler : recalculate() method</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-recalculate",          true, true, function(event) { this.recalculate(); });
]]>
		<cm:wiki>
** '''xforms-revalidate''' : fired at the end of the XFModel.recalculate() method
*** bubbles : yes
*** cancelable : yes
*** default handler : revalidate() method</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-revalidate",           true, true, function(event) { this.revalidate(); });
]]>
		<cm:wiki>
** '''xforms-reset''' : fired by a listener generated by the XSL transformation for the xforms:reset element
*** bubbles : yes
*** cancelable : yes
*** default handler : reset() method</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-reset",                true, true, function(event) { this.reset(); });
]]>
		<cm:wiki>
** '''xforms-submit''' : fired by a listener generated by the XSL transformation for the xforms:submit element
*** bubbles : yes
*** cancelable : yes
*** default handler : submit() method</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-submit",               true, true, function(event) { this.submit(); });
]]>
		<cm:wiki>
** '''xforms-refresh''' : fired at the end of the XFModel.revalidate() method
*** bubbles : yes
*** cancelable : yes
*** default handler : refresh() method</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-refresh",              true, true, function(event) { this.refresh(); });
]]>
		<cm:wiki>
** '''xforms-focus''' : fired by a listener generated by the XSL transformation for the xforms:setfocus action
*** bubbles : yes
*** cancelable : yes
*** default handler : focus() method</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-focus",                true, true, function(event) { this.focus(); } );

]]>
		<cm:wiki>
** '''DOMActivate''' : fired by the XFTrigger.click() method and by a listener generated by the XSL transformation for the xforms:submit element
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("DOMActivate",          true,  true);
]]>
		<cm:wiki>
** '''DOMFocusIn''' : fired by the XFControl.focus() method
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("DOMFocusIn",           true,  false);
]]>
		<cm:wiki>
** '''DOMFocusOut''' : fired by the xforms.blur() function to the element already having focus
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("DOMFocusOut",          true,  false);
]]>
		<cm:wiki>
** '''xforms-select''' : fired by the XFToggle.toggle(), XFSelect.normalChange() functions and XFSelect.itemClick() method
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-select",        true,  false);
]]>
		<cm:wiki>
** '''xforms-deselect''' : fired by the XFToggle.toggle(), XFSelect.normalChange() functions and XFSelect.itemClick() method
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-deselect",      true,  false);
]]>
		<cm:wiki>
** '''xforms-value-changed''' : fired by the XFControl.refresh() method
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-value-changed", true,  false);

]]>
		<cm:wiki>
** '''xforms-insert''' : fired by the XFInsert.run() method
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-insert",        true,  false);
]]>
		<cm:wiki>
** '''xforms-delete''' : fired by the XFDelete.run() method
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-delete",        true,  false);
]]>
		<cm:wiki>
** '''xforms-valid''' : fired by XFControl.refresh() method via the XFControl.changeProp() method
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-valid",         true,  false);
]]>
		<cm:wiki>
** '''xforms-invalid''' : fired by XFControl.refresh() method via the XFControl.changeProp() method
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-invalid",       true,  false);
]]>
		<cm:wiki>
** '''xforms-enabled''' : fired by XFControl.refresh() method via the XFControl.changeProp() method
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-enabled",       true,  false);
]]>
		<cm:wiki>
** '''xforms-disabled''' : fired by XFControl.refresh() method via the XFControl.changeProp() method
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-disabled",      true,  false);
]]>
		<cm:wiki>
** '''xforms-optional''' : fired by XFControl.refresh() method via the XFControl.changeProp() method
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-optional",      true,  false);
]]>
		<cm:wiki>
** '''xforms-required''' : fired by XFControl.refresh() method via the XFControl.changeProp() method
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-required",      true,  false);
]]>
		<cm:wiki>
** '''xforms-readonly''' : fired by XFControl.refresh() method via the XFControl.changeProp() method
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-readonly",      true,  false);
]]>
		<cm:wiki>
** '''xforms-readwrite''' : fired by XFControl.refresh() method via the XFControl.changeProp() method
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-readwrite",     true,  false);
]]>
		<cm:wiki>
** '''xforms-in-range''' : fired by the XFSelect.setValue() method
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-in-range",      true,  false);
]]>
		<cm:wiki>
** '''xforms-out-of-range''' : fired by the XFSelect.setValue() method
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-out-of-range",  true,  false);
]]>
		<cm:wiki>
** '''xforms-submit-done''' : fired by the XFSubmission.submit() method
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-submit-done",   true,  false);
]]>
		<cm:wiki>
** '''xforms-submit-error''' : fired by the XFSubmission.submit() method
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-submit-error",  true,  false);

]]>
		<cm:wiki>
** '''xforms-compute-exception''' : unused
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-compute-exception",     true, false);
]]>
		<cm:wiki>
** '''xforms-binding-exception''' : fired by the XFBind.refresh() method
*** bubbles : yes
*** cancelable : yes
*** default handler : empty</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-binding-exception",     true, false);

XMLEvents.define("ajx-start", true,  true, function(evt) { evt.target.xfElement.start(); });
XMLEvents.define("ajx-stop",  true,  true, function(evt) { evt.target.xfElement.stop(); });
XMLEvents.define("ajx-time",  true,  true);
]]>
		<cm:wiki>
** '''xforms-dialog-open''' : fired by a listener generated by the XSL transformation for the xforms:show action
*** bubbles : yes
*** cancelable : yes
*** default handler : show() method of the corresponding dialog</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-dialog-open",  true,  true, function(evt) { Dialog.show(evt.target, null, true); });
]]>
		<cm:wiki>
** '''xforms-dialog-close''' : fired by a listener generated by the XSL transformation for the xforms:hide action
*** bubbles : yes
*** cancelable : yes
*** default handler : hide() method of the corresponding dialog</cm:wiki>
<![CDATA[
XMLEvents.define("xforms-dialog-close",  true,  true, function(evt) { Dialog.hide(evt.target, true); });
    ]]>
	</cm:source>
</cm:component>