<cm:component xmlns:cm="http://www.agencexml.com/cm" name="XFSubmission.js">
	<cm:author>Alain Couthures</cm:author>
	<cm:creationdate>2009-04-07</cm:creationdate>
	<cm:lastupdate>2010-06-11</cm:lastupdate>
	<cm:licence>
Copyright (C) 2008-2010 &lt;agenceXML&gt; - Alain COUTHURES
Contact at : &lt;info@agencexml.com&gt;

Copyright (C) 2006 AJAXForms S.L.
Contact at: &lt;info@ajaxforms.com&gt;

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
	</cm:licence>
	<cm:source type="text/javascript">
		<cm:wiki>
=== "XFSubmission" class ===
Submission Class
* constructor function : store the properties of this submission and attaches it to a model</cm:wiki>
		<![CDATA[
function XFSubmission(id, model, ref, bind, action, method, version, indent,
			mediatype, encoding, omitXmlDeclaration, cdataSectionElements,
			replace, instance, separator, includenamespaceprefixes, validate,
			synchr, show, serialization) {
	this.init(id, model, "xforms-submission");
	this.model = model;
	if (model.defaultSubmission == null) {
		model.defaultSubmission = this;
	}
	this.action = action;
	this.method = method;
	this.replace = replace;
	this.version = version;
	this.indent = indent;
	this.validate = validate;
	this.synchr = synchr;
	this.show = show;
	this.serialization = serialization;

	if (mediatype != null) {
		var lines = mediatype.split(";");
		this.mediatype = lines[0];
         
		for (var i = 1, len = lines.length; i < len; i++) {
			var vals = lines[i].split("=");

			switch (vals[0]) {
				case "action" : this.soapAction = vals[1]; break;
				case "charset" : this.charset = vals[1]; break;
			}
		}
	}
    
	this.encoding = encoding;
	this.omitXmlDeclaration = omitXmlDeclaration;
	this.cdataSectionElements = cdataSectionElements;
	this.instance = instance;
	this.separator = separator == "&amp;"? "&" : separator;
	this.includenamespaceprefixes = includenamespaceprefixes;
	this.headers = [];

	if (ref || bind) {
		this.binding = new Binding(false, ref, model.element, bind);
        
		this.eval_ = function() {
			return this.binding.evaluate()[0];
		};
	} else {
		this.eval_ = function() {
			return this.model.getInstanceDocument();
		};
	}
};

XFSubmission.prototype = new XFCoreElement();

]]>
		<cm:wiki>
* '''header''' method : declares a header</cm:wiki>
<![CDATA[
XFSubmission.prototype.header = function(nodeset, combine, name, values) {
	this.headers.push({nodeset: nodeset, combine: combine, name: name, values: values});
	return this;
};
]]>
		<cm:wiki>
* '''submit''' method : submits serialized data according to choosen method</cm:wiki>
<![CDATA[
XFSubmission.prototype.submit = function() {
	xforms.openAction();
	var node = this.eval_();
	var action = "error";
	if(this.action.evaluate) {
		action = stringValue(this.action.evaluate());
	} else {
		action = this.action;
	}
	var method = "post";
	if(this.method.evaluate) {
		var method = stringValue(this.method.evaluate());
	} else {
		method = this.method;
	}
	var evcontext = {"method": method, "resource-uri": action};

	if (node) {
		if (this.validate && !validate_(node)) {
			evcontext["error-type"] = "validation-error";
			this.issueSubmitException_(evcontext, null, null);
			xforms.closeAction();
			return;
		}

		if ((method == "get" || method == "delete") && this.serialization != "none") {
			var tourl = XFSubmission.toUrl_(node, this.separator);
			action += (action.indexOf('?') == -1? '?' : this.separator)
				+ tourl.substr(0, tourl.length - this.separator.length);
		}
	}
	
	if (action.substr(0,7) == "file://") {
		alert('XSLTForms Submission\n---------------------------\n\n'+action+'\n\nfile:// is not supported for security reasons.\n\nContents copied instead in clipboard if possible\nand displayed by the browser.');
		var ser = Core.saveXML(node);
		if (window.clipboardData) {
			window.clipboardData.setData('Text', ser);
		}
		w = window.open("about:blank","_blank");
		w.document.write(ser);
		w.document.close();
		xforms.closeAction();
		return;
	}

	var synchr = this.synchr;
	var instance = this.instance;

	if(method == "xml-urlencoded-post") {
		var outForm = document.getElementById("xsltforms_form");
		if(outForm) {
			outForm.firstChild.value = Core.saveXML(node);
		} else {
			outForm = Core.isXhtml ? document.createElementNS("http://www.w3.org/1999/xhtml", "form") : document.createElement("form");
			outForm.setAttribute("method", "post");
			outForm.setAttribute("action", action);
			outForm.setAttribute("id", "xsltforms_form");
			var txt = Core.isXhtml ? document.createElementNS("http://www.w3.org/1999/xhtml", "input") : document.createElement("input");
			txt.setAttribute("type", "hidden");
			txt.setAttribute("name", "postdata");
			txt.setAttribute("value", Core.saveXML(node));
			outForm.appendChild(txt);
			body = Core.isXhtml ? document.getElementsByTagNameNS("http://www.w3.org/1999/xhtml", "body")[0] : document.getElementsByTagName("body")[0];
			body.insertBefore(outForm, body.firstChild);
		}
 		outForm.submit(); 	
		xforms.closeAction();
	} else {
	
		var cross = false;
		if (action.match(/^[a-zA-Z0-9+.-]+:\/\//)) {
			var domain = /^([a-zA-Z0-9+.-]+:\/\/[^\/]*)/;
			var sdom = domain.exec(action);
			var ldom = domain.exec(document.location.href);
			cross = sdom[0] != ldom[0];
		}
		if (cross) {
			jsoninstobj = instance == null? (node ? node.ownerDocument.instance : this.model.getInstance()) : document.getElementById(instance).xfElement;
			var scriptelt = Core.isXhtml ? document.createElementNS("http://www.w3.org/1999/xhtml", "script") : document.createElement("script");
			scriptelt.setAttribute("src", action.replace(/&amp;/g, "&")+"&callback=jsoninst");
			scriptelt.setAttribute("id", "jsoninst");
			scriptelt.setAttribute("type", "text/javascript");
			var body = Core.isXhtml ? document.getElementsByTagNameNS("http://www.w3.org/1999/xhtml", "body")[0] : document.getElementsByTagName("body")[0];
			body.insertBefore(scriptelt, body.firstChild);
			XMLEvents.dispatch(this, "xforms-submit-done");
			xforms.closeAction();
		} else {

			// TODO: Validate binding target is not empty
			if (!node && (method != "get" || method != "delete")) {
		    evcontext["error-type"] = "no-data";
		    this.issueSubmitException_(evcontext, null, null);
		    return;
			}

			var req = null;
			var subm = this;
			try {
				req = Core.openRequest(method, action, !synchr);
			
				var func = function() {
					if (!synchr && req.readyState != 4) { return; }
					
					try {
						if (req.status != 200 && req.status != 0) {
							evcontext["error-type"] = "resource-error";
							subm.issueSubmitException_(evcontext, req, null);
							xforms.closeAction();
							return;
						}
			
						if (subm.replace == "instance") {
							var inst = instance == null? (node ? node.ownerDocument.instance : subm.model.getInstance()) : document.getElementById(instance).xfElement;
							inst.setDoc(req.responseText, false, true);
							xforms.addChange(subm.model);
							XMLEvents.dispatch(subm.model, "xforms-rebuild");
							xforms.refresh();
						}
			
						XMLEvents.dispatch(subm, "xforms-submit-done");
						xforms.closeAction();
						
						if (subm.replace == "all") {
							var resp = req.responseText;
							var piindex = resp.indexOf("<?xml-stylesheet", 0);
							while ( piindex != -1) {
								var xslhref = resp.substr(piindex, resp.substr(piindex).indexOf("?>")).replace(/^.*href=\"([^\"]*)\".*$/, "$1");
								resp = Core.transformText(resp, xslhref, false);
								piindex = resp.indexOf("<?xml-stylesheet", 0);
							}
							if( subm.show == "new" ) {
								w = window.open("about:blank","_blank");
								w.document.write(resp);
								w.document.close();
							} else {
								Dialog.hide("statusPanel", false);
								xforms.close();
								if(document.write) {
									document.write(resp);
									document.close();
								} else {
									//document.documentElement.parentNode.replaceChild(req.responseXML.documentElement,document.documentElement);
									if (resp.indexOf("<?", 0) === 0) {
										resp = resp.substr(resp.indexOf("?>")+2);
									}                       
									//alert(resp);
									document.documentElement.innerHTML = resp;
								}
							}
						}
					} catch(e) {
						DebugConsole.write(e || e.message);
						evcontext["error-type"] = "parse-error";
						subm.issueSubmitException_(evcontext, req, e);
						xforms.closeAction();
					}
				
				};
			
				if (!synchr) {
					req.onreadystatechange = func;
				}
			
				var media = this.mediatype;
				var mt = (media || "application/xml")
					+ (this.charset? ";charset=" + this.charset : "");
			
				DebugConsole.write("Submit " + this.method + " - " + mt + " - "
					+ action + " - " + synchr);
				
				var len = this.headers.length;
				if (len != 0) {
					var headers = [];
					for (var i = 0, len = this.headers.length; i < len; i++) {
						var nodes = [];
						if (this.headers[i].nodeset) {
							nodes = this.headers[i].nodeset.evaluate();
						} else {
							nodes = [subm.model.getInstanceDocument().documentElement];
						}
						var hname;
						for (var n = 0, lenn = nodes.length; n < lenn; n++) {
							if (this.headers[i].name.evaluate) {
								hname = stringValue(this.headers[i].name.evaluate(nodes[n]));
							} else {
								hname = this.headers[i].name;
							}
							if (hname != "") {
								var hvalue = "";
								var j;
								for (j = 0, len2 = this.headers[i].values.length; j < len2; j++) {
									var hv = this.headers[i].values[j];
									var hv2;
									if (hv.evaluate) {
										hv2 = stringValue(hv.evaluate(nodes[n]));
									} else {
										hv2 = hv;
									}
									hvalue += hv2;
									if (j < len2 - 1) {
										hvalue += ",";
									}
								}
								var len3 = headers.length;
								for (j = 0; j < len3; j++) {
									if (headers[j].name == hname) {
										switch (this.headers[i].combine) {
											case "prepend":
												headers[j].value = hvalue + "," + headers[j].value;
												break;
											case "replace":
												headers[j].value = hvalue;
												break;
											default:
												headers[j].value += "," + hvalue;
												break;
										}
										break;
									}
								}
								if (j == len3) {
									headers.push({name: hname, value: hvalue});
								}
							}
						}
					}
					for (var i = 0, len = headers.length; i < len; i++) {
						req.setRequestHeader(headers[i].name, headers[i].value);
					}
				}

				if (method == "get" || method == "delete") {
					if (media == XFSubmission.SOAP_) {
						req.setRequestHeader("Accept", mt);
					}
			
					req.send(null);
				} else {
					req.setRequestHeader("Content-Type", mt);
			
					if (media == XFSubmission.SOAP_) {
						req.setRequestHeader("SOAPAction", this.soapAction);
					}
					req.send(Core.saveXML(node));
				}
			
				if (synchr) {
					func();
				}
			} catch(e) {
				DebugConsole.write(e.message || e);
				evcontext["error-type"] = "resource-error";
				subm.issueSubmitException_(evcontext, req, e);
				xforms.closeAction();
			}
		}
	}
};


XFSubmission.SOAP_ = "application/soap+xml";

]]>
		<cm:wiki>
* '''issueSubmitException_''' method : Prepares the event-context and issues a 'xforms-submit-error' event.</cm:wiki>
<![CDATA[
XFSubmission.prototype.issueSubmitException_ = function(evcontext, req, ex) {
	if (ex) {
		evcontext["message"] = ex.message || ex;
		evcontext["stack-trace"] = ex.stack;
	}
	if (req) {
		evcontext["response-status-code"] = req.status;
		evcontext["response-reason-phrase"] = req.statusText;
		var rheads = req.getAllResponseHeaders();
		if (rheads) {
			// TODO: Parse headers into nodes.
			evcontext["response-headers"] = rheads;
		}
		// TODO: Should it use the 'req.responseXML' function if parsing succeeded?
		evcontext["response-body"] = req.responseText;
	}
	XMLEvents.dispatch(this, "xforms-submit-error", null, null, null, null, evcontext);
};
]]>
		<cm:wiki>
* '''toUrl_''' method : recursively collects node values to add them to an URL</cm:wiki>
<![CDATA[
XFSubmission.toUrl_ = function(node, separator) {
	var url = "";
	var val = "";
	var hasChilds = false;

	for(var i = 0, len = node.childNodes.length; i < len; i++) {
		var child = node.childNodes[i];

		switch (child.nodeType) {
		case NodeType.ELEMENT :
			hasChilds = true;
			url += this.toUrl_(child, separator);
			break;
		case NodeType.TEXT :
			val += child.nodeValue;
			break;
		}
	}
    
	if (!hasChilds && val.length > 0) {
		url += node.nodeName + '=' + encodeURIComponent(val) + separator;
	}
    
	return url;
};
    ]]>
	</cm:source>
</cm:component>