<cm:component xmlns:cm="http://www.agencexml.com/cm" name="XFInstance.js">
	<cm:author>Alain Couthures</cm:author>
	<cm:creationdate>2009-04-07</cm:creationdate>
	<cm:lastupdate>2010-06-05</cm:lastupdate>
	<cm:licence>
Copyright (C) 2008-2010 &lt;agenceXML&gt; - Alain COUTHURES
Contact at : &lt;info@agencexml.com&gt;

Copyright (C) 2006 AJAXForms S.L.
Contact at: &lt;info@ajaxforms.com&gt;

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
	</cm:licence>
	<cm:source type="text/javascript">
		<cm:wiki>
=== "XFInstance" class ===
Instance Class
* constructor function : stores the properties of this instance and attaches it to a model</cm:wiki>
		<![CDATA[
function XFInstance(id, model, src, srcXML) {
	this.init(id, model, "xforms-instance");
	this.src = src;
	this.srcXML = Core.unescape(srcXML);
	this.model = model;
	this.doc = Core.createXMLDocument("<dummy/>");
	Core.setMeta(this.doc.documentElement, "instance", id);
	Core.setMeta(this.doc.documentElement, "model", model.element.id);
	model.addInstance(this);
}

XFInstance.prototype = new XFCoreElement();
 
]]>
		<cm:wiki>
* '''dispose''' method : clears the properties and recycles the associated nodes</cm:wiki>
<![CDATA[
XFInstance.prototype.dispose = function() {
	XFCoreElement.prototype.dispose.call(this);
	XNode.recycle(this.old);
	XNode.recycle(this.doc);
};

]]>
		<cm:wiki>
* '''construct''' method : loads the source of this instance locally or remotely</cm:wiki>
<![CDATA[
XFInstance.prototype.construct = function() {
	if (!xforms.ready) {
		if (this.src) {
			var cross = false;
			if (this.src.match(/^[a-zA-Z0-9+.-]+:\/\//)) {
				var domain = /^([a-zA-Z0-9+.-]+:\/\/[^\/]*)/;
				var sdom = domain.exec(this.src);
				var ldom = domain.exec(document.location.href);
				cross = sdom[0] != ldom[0];
			}
			if (cross) {
				this.setDoc('<dummy xmlns=""/>');
				jsoninstobj = this;
				var scriptelt = Core.isXhtml ? document.createElementNS("http://www.w3.org/1999/xhtml", "script") : document.createElement("script");
				scriptelt.setAttribute("src", this.src+"&callback=jsoninst");
				scriptelt.setAttribute("id", "jsoninst");
				scriptelt.setAttribute("type", "text/javascript");
				var body = Core.isXhtml ? document.getElementsByTagNameNS("http://www.w3.org/1999/xhtml", "body")[0] : document.getElementsByTagName("body")[0];
				body.insertBefore(scriptelt, body.firstChild);
			} else {
				try {
					var req = Core.openRequest("GET", this.src, false);
					DebugConsole.write("Loading " + this.src);
					req.send(null);
					if (req.status != 200 && req.status != 0) {
						throw "Request error: " + req.status;
					}
					this.setDoc(req.responseText);
				} catch(e) {
					xforms.error(this.element, "xforms-link-exception", "Fatal error loading " + this.src, e.toString());
				}
			}
		} else {
			this.setDoc(this.srcXML);
		}
	}
};

]]>
		<cm:wiki>
* '''reset''' method : simply restores the initial copy of this instance</cm:wiki>
<![CDATA[
XFInstance.prototype.reset = function() {
	this.setDoc(this.oldXML, true);
};
 
]]>
		<cm:wiki>
* '''store''' method : clones the document of this instance</cm:wiki>
<![CDATA[
XFInstance.prototype.store = function(isReset) {
	if (this.oldXML && !isReset) {
		this.oldXML = null;
	}
	this.oldXML = Core.saveXML(this.doc.documentElement);
};

]]>
		<cm:wiki>
* '''setDoc''' method : sets a document for this instance</cm:wiki>
<![CDATA[
XFInstance.prototype.setDoc = function(xml, isReset, preserveOld) {
	var instid = Core.getMeta(this.doc.documentElement, "instance");
	var modid = Core.getMeta(this.doc.documentElement, "model");
	Core.loadXML(this.doc.documentElement, xml);
	Core.setMeta(this.doc.documentElement, "instance", instid);
	Core.setMeta(this.doc.documentElement, "model", modid);
	if (!preserveOld) {
		this.store(isReset);
	}
};
        
]]>
		<cm:wiki>
* '''revalidate''' method : recursively revalidates each node of this instance according to readonly and relevant attributes</cm:wiki>
<![CDATA[
XFInstance.prototype.revalidate = function() {
    this.validation_(this.doc.documentElement);
};

XFInstance.prototype.validation_ = function(node, readonly, notrelevant) {
    if (readonly == null) { readonly = false; }
    if (notrelevant == null) { notrelevant = false; }

    this.validate_(node, readonly, notrelevant);
    readonly = Core.getBoolMeta(node, "readonly");
    notrelevant = Core.getBoolMeta(node, "notrelevant");
    var atts = node.attributes || [];

	if (atts) {
	    for (var i = 0, len = atts.length; i < len; i++) {
				if (atts[i].nodeName.substr(0,10) != "xsltforms_") {
					this.validation_(atts[i], readonly, notrelevant);
				}
	    }
	}
   
    for (var j = 0, len1 = node.childNodes.length; j < len1; j++) {
        var child = node.childNodes[j];

        if (child.nodeType == NodeType.ELEMENT) {
            this.validation_(child, readonly, notrelevant);
        }
    }
};

XFInstance.prototype.validate_ = function(node, readonly, notrelevant) {
	var bindid = Core.getMeta(node, "bind");
	var value = xmlValue(node);
	var schtyp = Schema.getType(Core.getMeta(node, "type") || "xsd_:string");
	if (bindid) {
		var bind = document.getElementById(bindid).xfElement;
		var nodes = bind.nodes;
		var i = 0;
		for (var len = nodes.length; i < len; i++) {
			if (nodes[i] == node) {
				break;
			}
		}
		var ctx = new ExprContext(node, i, nodes);
		if (bind.required) {
			this.setProperty_(node, "required", booleanValue(bind.required.evaluate(ctx)));
		}
		this.setProperty_(node, "notrelevant", notrelevant || !(bind.relevant? booleanValue(bind.relevant.evaluate(ctx)) : true));
		this.setProperty_(node, "readonly", readonly || (bind.readonly? booleanValue(bind.readonly.evaluate(ctx)) : bind.calculate ? true : false));
		this.setProperty_(node, "notvalid",
			!node.notrelevant && !(!(Core.getMeta(node, "required") == "true" && (!value || value == ""))
			&& (!schtyp || schtyp.validate(value))
			&& (!bind.constraint || booleanValue(bind.constraint.evaluate(ctx)))));
	} else {
		this.setProperty_(node, "notrelevant", notrelevant);
		this.setProperty_(node, "readonly", readonly);
		this.setProperty_(node, "notvalid", schtyp && !schtyp.validate(value));
	}
};

XFInstance.prototype.setProperty_ = function (node, property, value) {
	if (Core.getBoolMeta(node, property) != value) {
		Core.setBoolMeta(node, property, value);
		this.model.addChange(node);   
	}
};
]]>
		<cm:wiki>
* '''json2xml''' function : converts json to xml notation</cm:wiki>
<![CDATA[
function json2xml(name, json, root, inarray) {
	var ret = root ? "<root>" : "";
	if (json instanceof Array) {
		if (inarray) {
			ret += "<item>";
		}
		for (var i = 0, len = json.length; i < len; i++) {
			ret += json2xml(name == "" ? "item" : name, json[i], false, true);
		}
		if (inarray) {
			ret += "</item>";
		}
	} else {
		ret += name == "" ? "" : "<"+name+">";
		if (typeof(json) == "object") {
			for (var m in json) {
				ret += json2xml(m, json[m], false, false);
			}
		} else {
			ret += json;
		}
		ret += name == "" ? "" : "</"+name+">";
	}
	ret += root ? "</root>" : "";
	return ret;
}
]]>
		<cm:wiki>
* '''jsoninst''' function : replaces instance data from json content</cm:wiki>
<![CDATA[
var jsoninstobj;
function jsoninst(json) {
	jsoninstobj.setDoc(json2xml("", json, true, false));
	xforms.addChange(jsoninstobj.model);
	XMLEvents.dispatch(jsoninstobj.model, "xforms-rebuild");
	xforms.refresh();
	document.body.removeChild(document.getElementById("jsoninst"));
}
    ]]>
	</cm:source>
</cm:component>